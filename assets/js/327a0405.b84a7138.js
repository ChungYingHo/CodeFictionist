"use strict";(self.webpackChunkcode_fictionist=self.webpackChunkcode_fictionist||[]).push([[5010],{51179:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var i=t(85893),o=t(11151);const s={title:"Vue3 - \u5143\u4ef6\u8207\u8cc7\u6599\u50b3\u905e",tags:["vue3"]},a=void 0,r={id:"framework/Vue/vue-data-transfer",title:"Vue3 - \u5143\u4ef6\u8207\u8cc7\u6599\u50b3\u905e",description:"Component",source:"@site/docs/framework/Vue/02-vue-data-transfer.mdx",sourceDirName:"framework/Vue",slug:"/framework/Vue/vue-data-transfer",permalink:"/docs/framework/Vue/vue-data-transfer",draft:!1,unlisted:!1,tags:[{inline:!0,label:"vue3",permalink:"/docs/tags/vue-3"}],version:"current",sidebarPosition:2,frontMatter:{title:"Vue3 - \u5143\u4ef6\u8207\u8cc7\u6599\u50b3\u905e",tags:["vue3"]},sidebar:"programSidebar",previous:{title:"Vue3 - \u5c08\u6848\u5efa\u7acb\u8207\u97ff\u61c9\u5f0f\u8cc7\u6599",permalink:"/docs/framework/Vue/reactive"},next:{title:"Vue3 - Pinia \u7ba1\u7406\u8cc7\u6599",permalink:"/docs/framework/Vue/pinia"}},l={},c=[{value:"Component",id:"component",level:2},{value:"Simple use of component",id:"simple-use-of-component",level:3},{value:"Globally import a component",id:"globally-import-a-component",level:3},{value:"Data Transmission",id:"data-transmission",level:2},{value:"props",id:"props",level:3},{value:"emit",id:"emit",level:3},{value:"Can we pass the function from parent to child with <code>props</code>?",id:"can-we-pass-the-function-from-parent-to-child-with-props",level:3},{value:"v-model",id:"v-model",level:3},{value:"How to pass the <code>v-model</code> between components?",id:"how-to-pass-the-v-model-between-components",level:3},{value:"Can we binding multiple <code>v-model</code>?",id:"can-we-binding-multiple-v-model",level:3},{value:"provide-inject",id:"provide-inject",level:3},{value:"Reference",id:"reference",level:2}];function d(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",br:"br",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"component",children:"Component"}),"\n",(0,i.jsxs)(n.p,{children:["The core architecture of Vue (also in React) revolves around components, which encapsulate reusable logic, styles, and content.",(0,i.jsx)(n.br,{}),"\n","By packaging these elements into individual components, Vue enhances code reusability and development efficiency. Simply put, a webpage created with Vue is assembled from many such components, with data flowing between them to alter and render our view."]}),"\n",(0,i.jsx)(n.h3,{id:"simple-use-of-component",children:"Simple use of component"}),"\n",(0,i.jsx)(n.p,{children:"Below are is a simple component for example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",metastring:"title='PeopleBlock.vue'",children:"<script setup>\n    \x3c!-- Javascript here --\x3e\n<\/script>\n\n<template>\n    <h1>I am a component</h1>\n</template>\n\n<style>\n    \x3c!-- css here --\x3e\n</style>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Then, we can import this component (",(0,i.jsx)(n.code,{children:"PeopleBlock.vue"}),") into ",(0,i.jsx)(n.code,{children:"App.vue"}),", now we can call ",(0,i.jsx)(n.code,{children:"App.vue"})," is a parent component and ",(0,i.jsx)(n.code,{children:"PeopleBlock.vue"})," is a child component."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",metastring:"title='App.vue'",children:"<script setup>\n  import PeopleBlock from './components/PeopleBlock.vue';\n<\/script>\n\n<template>\n  <PeopleBlock />\n</template>\n"})}),"\n",(0,i.jsx)(n.h3,{id:"globally-import-a-component",children:"Globally import a component"}),"\n",(0,i.jsxs)(n.p,{children:["Sometimes, certain components need to be imported in many places. To avoid writing numerous ",(0,i.jsx)(n.code,{children:"import"})," statements, we can configure our application to globally import these components."]}),"\n",(0,i.jsxs)(n.p,{children:["Now, go to modify the ",(0,i.jsx)(n.code,{children:"main.js"}),".",(0,i.jsx)(n.br,{}),"\n","The first code block below is the configuration before modification:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:"title='Before'",children:"import './assets/main.css'\n\nimport { createApp } from 'vue'\nimport App from './App.vue'\n\ncreateApp(App).mount('#app')\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Now, we configure the application to globally import ",(0,i.jsx)(n.code,{children:"PeopleBlock.vue"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:"title='After'",children:"import './assets/main.css'\n\nimport { createApp } from 'vue'\nimport App from './App.vue'\nimport PeopleBlock from './components/PeopleBlock.vue'\n\nconst app = createApp(App)\napp.component('PeopleBlock', PeopleBlock)\n\napp.mount('#app')\n"})}),"\n",(0,i.jsx)(n.h2,{id:"data-transmission",children:"Data Transmission"}),"\n",(0,i.jsx)(n.h3,{id:"props",children:"props"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"props"})," is a mechanism for passing data from a parent component to a child component.",(0,i.jsx)(n.br,{}),"\n","For example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",metastring:"title='App.vue (parent)'",children:'<template>\n  <PeopleBlock name="Jeremy"/>\n</template>\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",metastring:"title='PeopleBlock.vue (child)'",children:"<script setup>\n    const props = defineProps(['name'])\n<\/script>\n\n<template>\n    <h1>My name is: {{ props.name }}</h1>\n</template>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In Vue, you can use ",(0,i.jsx)(n.code,{children:"defineProps"})," in child components to define the properties received from the parent component.",(0,i.jsx)(n.br,{}),"\n","These properties can be defined either as an array or as an object\uff1a"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:"title='defineProps as an object'",children:"const props = defineProps({\n    name:{\n        type: String,\n        default: ''\n    }\n})\n"})}),"\n",(0,i.jsx)(n.h3,{id:"emit",children:"emit"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"Props in, Events out."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The principle of ",(0,i.jsx)(n.code,{children:"Props in, Events out"})," in Vue refers to using ",(0,i.jsx)(n.code,{children:"props"})," to pass data from the parent to the child component, and using ",(0,i.jsx)(n.code,{children:"emit"}),' to send events from the child back to the parent component for data modification."']}),"\n",(0,i.jsx)(n.p,{children:"For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",metastring:"title='App.vue (parent)'",children:"<script setup>\n  import { ref } from 'vue';\n  const name = ref('Jeremy')\n  const changeName = (newName)=> name.value = newName\n<\/script>\n\n<template>\n  <PeopleBlock :name=\"name\" @update-name=\"() => changeName('Joanna')\"/>\n</template>\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",metastring:"title='PeopleBlock.vue (child)'",children:"<script setup>\n    const props = defineProps({\n        name:{\n            type: String,\n            default: ''\n        }\n    })\n    defineEmits(['update-name'])\n<\/script>\n\n<template>\n    <h1>My name is: {{ props.name }}</h1>\n    <button @click=\"$emit('update-name')\">click</button>\n</template>\n"})}),"\n",(0,i.jsx)(n.p,{children:"Let me explain it:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["In the example, ",(0,i.jsx)(n.code,{children:"defineEmits"})," is used in ",(0,i.jsx)(n.code,{children:"PeopleBlock.vue"})," (child component) to define a custom event named ",(0,i.jsx)(n.code,{children:"update-name"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["When the button in the child component's template is clicked, the ",(0,i.jsx)(n.code,{children:"update-name event"})," is emitted to the parent component using ",(0,i.jsx)(n.code,{children:"$emit"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["In the parent component ",(0,i.jsx)(n.code,{children:"App.vue"}),", the event ",(0,i.jsx)(n.code,{children:"update-name"})," is listened for with ",(0,i.jsx)(n.code,{children:"@update-name"}),", and it is bound to the ",(0,i.jsx)(n.code,{children:"changeName"})," function for data modification"]}),"\n"]}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsxs)(n.h3,{id:"can-we-pass-the-function-from-parent-to-child-with-props",children:["Can we pass the function from parent to child with ",(0,i.jsx)(n.code,{children:"props"}),"?"]}),(0,i.jsxs)(n.p,{children:["If you have a background in React and are transitioning to Vue, you might wonder if you can pass functions from parent to child components via ",(0,i.jsx)(n.code,{children:"props"}),", as is commonly done in React.",(0,i.jsx)(n.br,{}),"\n","Indeed, it is technically possible in Vue."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",metastring:"title='parent'",children:"<script setup>\n  import { ref } from 'vue';\n  const name = ref('Jeremy')\n  const changeName = (newName)=> name.value = newName\n<\/script>\n\n<template>\n  <PeopleBlock :name=\"name\" :change-name=\"changeName\"/>\n</template>\n"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",metastring:"title='child'",children:"<script setup>\n    const props = defineProps({\n        name:{\n            type: String,\n            default: ''\n        },\n        changeName:{\n            type: Function,\n            default: () => {}\n        }\n    })\n<\/script>\n\n<template>\n    <h1>My name is: {{ props.name }}</h1>\n    <button @click=\"changeName('Joanna')\">click</button>\n</template>\n"})}),(0,i.jsxs)(n.p,{children:["However, Vue recommends a different approach known as ",(0,i.jsx)(n.code,{children:"Props in, Events out"}),", which I have explained above.",(0,i.jsx)(n.br,{}),"\n","Just follow what the Vue officials say to avoid some unexpected mistakes."]})]}),"\n",(0,i.jsx)(n.h3,{id:"v-model",children:"v-model"}),"\n",(0,i.jsxs)(n.p,{children:["In Vue, ",(0,i.jsx)(n.code,{children:"v-model"})," is a directive used for creating two-way bindings on form input, textarea, and select elements.",(0,i.jsx)(n.br,{}),"\n","It automatically picks the correct way to update the element based on the input type."]}),"\n",(0,i.jsxs)(n.p,{children:["When the value of the form element changes, the bound Vue instance data is automatically updated, and vice versa.",(0,i.jsx)(n.br,{}),"\n","This makes handling form data in Vue applications more convenient and efficient.",(0,i.jsx)(n.br,{}),"\n","For example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:"<script setup>\n  import { ref } from 'vue';\n  const name = ref('Jeremy')\n<\/script>\n\n<template>\n  <input type=\"text\" v-model=\"name\">\n  <h1>{{ name }}</h1>\n</template>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Moreover, ",(0,i.jsx)(n.code,{children:"v-model"})," provides three modifiers to assist with form handling:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:".lazy"}),": Changes the way Vue synchronizes the input with the data, from updating on every input event to updating on change events. This means the data is updated when the input field loses focus or the input is completed."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:".number"}),": Attempts to convert the user's input into a number. This is especially useful for numeric inputs, avoiding extra type conversion during form submission."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:".trim"}),": Automatically removes any leading and trailing whitespace from the user's input. This is helpful for processing user input, reducing the need for additional string manipulation on the backend.\""]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"how-to-pass-the-v-model-between-components",children:["How to pass the ",(0,i.jsx)(n.code,{children:"v-model"})," between components?"]}),"\n",(0,i.jsxs)(n.p,{children:["To pass ",(0,i.jsx)(n.code,{children:"v-model"})," between components in Vue, I define a prop named ",(0,i.jsx)(n.code,{children:"modelValue"})," in the child component to receive the value from the parent component and an emit event (like ",(0,i.jsx)(n.code,{children:"update:modelValue"}),") to notify the parent component about data changes in the child component."]}),"\n",(0,i.jsxs)(n.p,{children:["In the child component, the ",(0,i.jsx)(n.code,{children:"<input>"})," element binds its value to ",(0,i.jsx)(n.code,{children:"modelValue"})," and triggers the ",(0,i.jsx)(n.code,{children:"update:modelValue event"})," in its input event, sending the updated value back to the parent."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",metastring:"title='parent'",children:"<script setup>\n  import { ref } from 'vue';\n  import InputArea from './components/InputArea.vue'\n  const name = ref('Jeremy')\n<\/script>\n\n<template>\n  <InputArea v-model=\"name\"/>\n</template>\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",metastring:"title='child'",children:"<script setup >\n    defineProps(['modelValue'])\n    defineEmits(['update:modelValue'])\n<\/script>\n\n<template>\n    <input type=\"text\" :value=\"modelValue\" @input=\"$emit('update:modelValue', $event.target.value)\">\n    <h2>{{ modelValue }}</h2>\n</template>\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"can-we-binding-multiple-v-model",children:["Can we binding multiple ",(0,i.jsx)(n.code,{children:"v-model"}),"?"]}),"\n",(0,i.jsx)(n.p,{children:"Sure, the example from Vue official:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",metastring:"title='App.vue'",children:"<script setup>\n  import { ref } from 'vue';\n  import InputArea from './components/InputArea.vue'\n  const first = ref('Jeremy')\n  const last = ref('Ho')\n<\/script>\n\n<template>\n  <InputArea\n    v-model:first-name=\"first\"\n    v-model:last-name=\"last\"\n  />\n</template>\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",metastring:"title='InputArea.vue'",children:'<script setup>\n    defineProps({\n        firstName: String,\n        lastName: String\n    })\n\n    defineEmits([\'update:firstName\', \'update:lastName\'])\n<\/script>\n\n<template>\n  <input\n    type="text"\n    :value="firstName"\n    @input="$emit(\'update:firstName\', $event.target.value)"\n  />\n  <input\n    type="text"\n    :value="lastName"\n    @input="$emit(\'update:lastName\', $event.target.value)"\n  />\n  <h1>{{ firstName }} {{ lastName }}</h1>\n</template>\n'})}),"\n",(0,i.jsxs)(n.admonition,{type:"warning",children:[(0,i.jsxs)(n.p,{children:["Maybe you will notice that the ",(0,i.jsx)(n.code,{children:"v-model"})," binding variable is different in topic ",(0,i.jsx)(n.code,{children:"How to pass the v-model between components?"})," and this example:"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",metastring:"title='How to pass the v-model between components?'",children:'<InputArea v-model="name"/>\n'})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",metastring:"title='In this example'",children:'<InputArea\n    v-model:first-name="first"\n    v-model:last-name="last"\n/>\n'})}),(0,i.jsxs)(n.p,{children:["In Vue, ",(0,i.jsx)(n.code,{children:"v-model"})," is used for two-way data binding. When you need to handle multiple ",(0,i.jsx)(n.code,{children:"v-model"})," bindings within a single child component, you can use ",(0,i.jsx)(n.code,{children:"v-model"})," with modifiers, such as ",(0,i.jsx)(n.code,{children:'v-model:first-name="first"'})," and ",(0,i.jsx)(n.code,{children:'v-model:last-name="last"'}),".",(0,i.jsx)(n.br,{}),"\n","In this case, you need to use custom prop names in the child component via defineProps to receive these values."]}),(0,i.jsxs)(n.p,{children:["With a non-modified v-model (like ",(0,i.jsx)(n.code,{children:'v-model="name"'}),"), the corresponding prop in the child component must be named ",(0,i.jsx)(n.code,{children:"modelValue"}),".",(0,i.jsx)(n.br,{}),"\n","However, with a modified v-model (such as ",(0,i.jsx)(n.code,{children:'v-model:first-name="first"'}),"), you can define props in the child component with custom names, like firstName."]})]}),"\n",(0,i.jsx)(n.h3,{id:"provide-inject",children:"provide-inject"}),"\n",(0,i.jsxs)(n.p,{children:["In Vue, when you need to pass data across distant component levels (such as from a grandparent to a grandchild component), using props becomes complicated.",(0,i.jsx)(n.br,{}),"\n","In these situations, Vue's provide and ",(0,i.jsx)(n.code,{children:"inject"})," features can be used for data transmission."]}),"\n",(0,i.jsxs)(n.p,{children:["In the higher-level component (like the grandparent), you use the ",(0,i.jsx)(n.code,{children:"provide"})," function to supply data.",(0,i.jsx)(n.br,{}),"\n","This function accepts two arguments: the first is the name under which the data will be provided, and the second is the actual data to be provided."]}),"\n",(0,i.jsxs)(n.p,{children:["In the lower-level component (like the grandchild), you use the ",(0,i.jsx)(n.code,{children:"inject"})," function to inject the provided data.",(0,i.jsx)(n.br,{}),"\n","This function takes one argument, which is the name of the provided data."]}),"\n",(0,i.jsx)(n.p,{children:"For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",metastring:"title='parent'",children:"<script setup>\nimport { ref, provide } from 'vue';\nimport HelloWorld from './components/HelloWorld.vue';\nconst greeting = ref('hello world')\nprovide('msg', greeting)\n<\/script>\n\n<template>\n  <HelloWorld />\n</template>\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",metastring:"title='child'",children:"<script setup>\nimport { inject } from 'vue';\n\nconst msg = inject('msg')\n<\/script>\n\n<template>\n  <h1>{{ msg }}</h1>\n</template>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"reference",children:"Reference"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://cn.vuejs.org/guide/quick-start.html",children:"Vue.js"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.youtube.com/watch?v=ureFPVghH30&list=PLbOfcOk7bN42Kzp1wQsoLuU0vPUmFBe-X&index=5",children:"Vue3 + Vite \u5feb\u901f\u4e0a\u624b Get Startrd EP3 - components / props / emit"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.youtube.com/watch?v=firPRbhoX7o&list=PLbOfcOk7bN42Kzp1wQsoLuU0vPUmFBe-X&index=5",children:"Vue3 + Vite \u5feb\u901f\u4e0a\u624b Get Startrd EP4 - v-model \u8cc7\u6599\u7684\u96d9\u5411\u7d81\u5b9a / \u81ea\u8a02\u7fa9\u7d44\u4ef6\u7684\u8cc7\u6599\u7d81\u5b9a / One-Way Data Flow \u55ae\u5411\u8cc7\u6599\u6d41"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://blog.csdn.net/qq449245884/article/details/106066381",children:"Vue \u4e2d\uff0c\u5982\u4f55\u5c06\u51fd\u6570\u4f5c\u4e3a props \u4f20\u9012\u7ed9\u7ec4\u4ef6"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://docs-99.vercel.app/Vue/props-emit.html",children:"\u7236\u5b50\u7d44\u4ef6\u8cc7\u6599\u50b3\u905e props\u3001$emit"})}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>a});var i=t(67294);const o={},s=i.createContext(o);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);