"use strict";(self.webpackChunkcode_fictionist=self.webpackChunkcode_fictionist||[]).push([[3871],{42309:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>l});var i=n(85893),o=n(11151);const s={title:"Vue3 - Pinia \u7ba1\u7406\u8cc7\u6599",tags:["vue3","pinia"]},a=void 0,r={id:"tech_articles/framework/Vue/pinia",title:"Vue3 - Pinia \u7ba1\u7406\u8cc7\u6599",description:"Why Pinia?",source:"@site/docs/tech_articles/03-framework/02-Vue/03-pinia.mdx",sourceDirName:"tech_articles/03-framework/02-Vue",slug:"/tech_articles/framework/Vue/pinia",permalink:"/docs/tech_articles/framework/Vue/pinia",draft:!1,unlisted:!1,tags:[{inline:!0,label:"vue3",permalink:"/docs/tags/vue-3"},{inline:!0,label:"pinia",permalink:"/docs/tags/pinia"}],version:"current",sidebarPosition:3,frontMatter:{title:"Vue3 - Pinia \u7ba1\u7406\u8cc7\u6599",tags:["vue3","pinia"]},sidebar:"programSidebar",previous:{title:"Vue3 - \u5143\u4ef6\u8207\u8cc7\u6599\u50b3\u905e",permalink:"/docs/tech_articles/framework/Vue/vue-data-transfer"},next:{title:"Vue3 - vue router",permalink:"/docs/tech_articles/framework/Vue/vue-router"}},c={},l=[{value:"Why Pinia?",id:"why-pinia",level:2},{value:"How to use Pinia?",id:"how-to-use-pinia",level:2},{value:"What is store?",id:"what-is-store",level:2},{value:"Access the data inside a store",id:"access-the-data-inside-a-store",level:2},{value:"Deconstruction of a store",id:"deconstruction-of-a-store",level:2},{value:"Reset the statement of store",id:"reset-the-statement-of-store",level:2},{value:"Modify the state",id:"modify-the-state",level:2},{value:"Listen to state changes",id:"listen-to-state-changes",level:2},{value:"Listen to action(method) change",id:"listen-to-actionmethod-change",level:2}];function d(e){const t={admonition:"admonition",br:"br",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"why-pinia",children:"Why Pinia?"}),"\n",(0,i.jsx)(t.p,{children:"Using Pinia for state management in Vue.js applications offers a unified and manageable approach to share data across multiple components. While props, emit, and provide/inject mechanisms are suitable for parent-child component communication, they can become cumbersome when dealing with complex data sharing needs."}),"\n",(0,i.jsx)(t.p,{children:"Pinia provides a centralized store to facilitate data sharing among any components, simplifying cross-component communication and enhancing maintainability, especially in large-scale applications."}),"\n",(0,i.jsx)(t.h2,{id:"how-to-use-pinia",children:"How to use Pinia?"}),"\n",(0,i.jsx)(t.p,{children:"When creating a Vue project, you have the option to use Pinia for state management. If selected, upon project initialization, a stores directory will be automatically created under the /src folder to house state management files."}),"\n",(0,i.jsx)(t.p,{children:"Additionally, Pinia will be automatically imported in the main.js file, allowing for its use throughout the application."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"import './assets/main.css'\nimport { createApp } from 'vue'\nimport { createPinia } from 'pinia'\nimport App from './App.vue'\n\nconst app = createApp(App)\n\napp.use(createPinia())\napp.mount('#app')\n"})}),"\n",(0,i.jsxs)(t.admonition,{type:"info",children:[(0,i.jsx)(t.p,{children:"For existing Vue projects wishing to adopt Pinia for state management, Pinia can be added by installing it via npm or yarn. After installation, manual modifications to main.js or main.ts (depending on project configuration) are required to import and activate Pinia."}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-powershell",children:"npm install pinia\n"})})]}),"\n",(0,i.jsx)(t.h2,{id:"what-is-store",children:"What is store?"}),"\n",(0,i.jsxs)(t.p,{children:["In a new project, a ",(0,i.jsx)(t.strong,{children:"counter.js"})," file is typically created by default under the ",(0,i.jsx)(t.code,{children:"/src/stores"})," directory as an example of a store."]}),"\n",(0,i.jsx)(t.p,{children:"Stores are responsible for storing states and logic that can be globally accessed. In other words, they can contain data, computed properties, and methods."}),"\n",(0,i.jsxs)(t.p,{children:["To define a store, you must first import ",(0,i.jsx)(t.code,{children:"defineStore"})," from pinia.",(0,i.jsx)(t.br,{}),"\n","The naming convention usually starts with ",(0,i.jsx)(t.strong,{children:"use"})," followed by the main purpose of the store and ends with ",(0,i.jsx)(t.strong,{children:"Store"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"defineStore"}),' accepts two parameters: the first one is the store ID, which can be the name without the "use" prefix; the second is an arrow function that contains the data or logic to be stored.']}),"\n",(0,i.jsx)(t.p,{children:"Let's take a closer look at the example provided by Pinia in the project:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"import { ref, computed } from 'vue'\nimport { defineStore } from 'pinia'\n\nexport const useCounterStore = defineStore('counter', () => {\n  const count = ref(0)\n  const doubleCount = computed(() => count.value * 2)\n  function increment() {\n    count.value++\n  }\n\n  return { count, doubleCount, increment }\n})\n"})}),"\n",(0,i.jsx)(t.h2,{id:"access-the-data-inside-a-store",children:"Access the data inside a store"}),"\n",(0,i.jsx)(t.p,{children:"To access the data or logic inside a store, we can directly import the required store into a component and assign its content to a variable (typically named with a 'Store' suffix, like xxStore). Afterwards, this variable can be used within the component to access the data or logic contained in xxStore."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-xml",metastring:"title='App.vue'",children:"<script setup>\nimport {useCounterStore} from '@/stores/counter'\nconst store = useCounterStore()\n<\/script>\n\n<template>\n  <h1>{{ store.count }}</h1>\n  <button @click=\"store.increment\">Add</button>\n</template>\n"})}),"\n",(0,i.jsx)(t.h2,{id:"deconstruction-of-a-store",children:"Deconstruction of a store"}),"\n",(0,i.jsxs)(t.p,{children:["The deconstruction of a store depends on whether you're extracting data or methods. For methods, direct deconstruction can be used. However, for reactive data (including computed properties), it's necessary to use ",(0,i.jsx)(t.code,{children:"storeToRefs"})," to extract them in order to preserve their reactivity. Here's an example from the official documentation."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-xml",metastring:"title='App.vue'",children:"<script setup>\nimport { storeToRefs } from 'pinia'\nimport {useCounterStore} from '@/stores/counter'\n\nconst store = useCounterStore()\nconst {count, doubleCount} = storeToRefs(store)\nconst {increment} = store\n<\/script>\n\n<template>\n  <h1>{{ count }}</h1>\n  <button @click=\"increment\">Add</button>\n</template>\n"})}),"\n",(0,i.jsx)(t.h2,{id:"reset-the-statement-of-store",children:"Reset the statement of store"}),"\n",(0,i.jsxs)(t.p,{children:["We can define a ",(0,i.jsx)(t.code,{children:"$reset"})," method in our store to reset its state. This allows for an easy way to revert the store back to its initial state."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:"title='Counter.js'",children:"export const useCounterStore = defineStore('counter', () => {\n  const count = ref(0)\n  const doubleCount = computed(() => count.value * 2)\n  function increment() {\n    count.value++\n  }\n  //  add a reset method\n  const $reset = () => count.value = 0\n\n  return { count, doubleCount, increment, $reset }\n})\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-xml",metastring:"title='App.vue'",children:'<script setup>\nimport {useCounterStore} from \'@/stores/counter\'\n\nconst store = useCounterStore()\n<\/script>\n\n<template>\n  <h1>{{ store.count }}</h1>\n  <button @click="store.increment">Add</button>\n  <button @click="store.$reset">Reset to 0</button>\n</template>\n'})}),"\n",(0,i.jsx)(t.h2,{id:"modify-the-state",children:"Modify the state"}),"\n",(0,i.jsxs)(t.p,{children:["Managing and modifying the state within a Pinia store can be approached in several ways, each with its use cases and considerations.",(0,i.jsx)(t.br,{}),"\n","Here's an explanation and some linguistic adjustments for the methods you've mentioned:"]}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"Direct modification (Not recommended): Although straightforward, directly modifying the store's state from outside components is generally discouraged. This approach bypasses Vue's reactivity system, potentially leading to situations where the UI does not update to reflect changes immediately."}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-xml",children:'<button @click="store.count++">Add</button>\n'})}),"\n",(0,i.jsxs)(t.ol,{start:"2",children:["\n",(0,i.jsx)(t.li,{children:"Modification through methods: This is a more recommended approach, especially when the logic for changing the state is complex. It maintains the encapsulation and maintainability of operations."}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-xml",children:'<button @click="store.increment()">Increase</button>\n'})}),"\n",(0,i.jsxs)(t.ol,{start:"3",children:["\n",(0,i.jsxs)(t.li,{children:["Using the ",(0,i.jsx)(t.code,{children:"$patch"})," method: The ",(0,i.jsx)(t.code,{children:"$patch"})," method allows for a more declarative way of updating multiple states within the store, which is particularly useful for scenarios requiring bulk state updates."]}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"const addCount = () => {\n  store.$patch((state) => {\n    state.count++\n  })\n}\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-xml",children:'<button @click="addCount">Increase</button>\n'})}),"\n",(0,i.jsx)(t.h2,{id:"listen-to-state-changes",children:"Listen to state changes"}),"\n",(0,i.jsxs)(t.p,{children:["It is possible to use ",(0,i.jsx)(t.code,{children:"watch"}),", but Pinia offers its own method for this purpose, called ",(0,i.jsx)(t.code,{children:"$subscribe"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"$subscribe"})," method accepts two parameters: one for the mutation and another for the object to observe. When logging the mutation to the console, it reveals three key properties:"]}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"type: Indicates how the data change was made."}),"\n",(0,i.jsx)(t.li,{children:"storeId: Identifies the current store."}),"\n",(0,i.jsx)(t.li,{children:"events: Details the specific data changes within the state."}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"This feature allows developers to reactively listen to state changes within their Pinia stores, providing a more integrated and Pinia-centric way of handling state changes compared to the generic Vue watch utility."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:"title='$subscribe'",children:"store.$subscribe((mutation, state) =>{\n  console.log('Something changed!')\n})\n"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",metastring:"title='watch'",children:"watch(store, state =>{\n  console.log(`watch here`, state)\n}, {deep : true})\n"})}),"\n",(0,i.jsx)(t.h2,{id:"listen-to-actionmethod-change",children:"Listen to action(method) change"}),"\n",(0,i.jsxs)(t.p,{children:["Just like observing data changes, Vue can use ",(0,i.jsx)(t.code,{children:"$onAction"})," to monitor the invocation of actions. For instance, to track the execution time of the increment function:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"store.$onAction(({ name, after }) => {\n  if (name === 'increment') {\n    const startTime = Date.now();\n\n    after(() => {\n      console.log(\n        `Finished \"${name}\" after ${\n          Date.now() - startTime\n        }ms.`\n      );\n    });\n  }\n})\n"})})]})}function h(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>r,a:()=>a});var i=n(67294);const o={},s=i.createContext(o);function a(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);